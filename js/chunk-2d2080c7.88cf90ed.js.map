{"version":3,"sources":["webpack:///./node_modules/@stencil/core/internal/client/shadow-css.js"],"names":["safeSelector","selector","placeholders","content","index","replace","_","keep","replaceBy","push","pseudo","exp","ss","restoreSafeSelector","_polyfillHost","_polyfillSlotted","_polyfillHostContext","_parenSuffix","_cssColonHostRe","RegExp","_cssColonHostContextRe","_cssColonSlottedRe","_polyfillHostNoCombinator","_polyfillHostNoCombinatorRe","_shadowDOMSelectorsRe","_selectorReSuffix","_polyfillHostRe","_colonHostRe","_colonSlottedRe","_colonHostContextRe","_commentRe","stripComments","input","_commentWithHashRe","extractCommentsWithHash","match","_ruleRe","_curlyRe","OPEN_CURLY","CLOSE_CURLY","BLOCK_PLACEHOLDER","processRules","ruleCallback","inputWithEscapedBlocks","escapeBlocks","nextBlockIndex","escapedString","m","suffix","contentPrefix","startsWith","blocks","substring","length","cssRule","rule","inputParts","split","resultParts","escapedBlocks","bracketCount","currentBlockParts","partIndex","part","join","strEscapedBlocks","insertPolyfillHostInCssText","convertColonRule","cssText","regExp","partReplacer","parts","r","i","p","trim","colonHostPartReplacer","host","convertColonHost","colonHostContextPartReplacer","indexOf","convertColonSlotted","slotScopeId","slotClass","selectors","compound","slottedSelector","prefixSelector","char","orgSelector","addedSelector","trimRight","updatedSelector","convertColonHostContext","convertShadowDOMSelectors","reduce","result","pattern","makeScopeMatcher","scopeSelector","lre","rre","selectorNeedsScoping","re","test","applySimpleSelectorScope","hostSelector","lastIndex","before","colon","after","applyStrictSelectorScope","isRe","className","_scopeSelectorPart","scopedP","t","matches","safeContent","res","scopedSelector","startIndex","sep","hasHost","shouldScope","exec","separator","slice","scopedPart","scopeSelectorText","slotSelector","map","shallowPart","scopeSelectors","commentOriginalSelector","scopeCssText","scopeId","hostScopeId","slotted","slottedSelectors","scopeCss","commentsWithHash","orgSelectors","processCommentedSelector","placeholder","comment","scoped","forEach"],"mappings":"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","file":"js/chunk-2d2080c7.88cf90ed.js","sourcesContent":["/*\r\n Stencil Client Platform v2.10.0 | MIT Licensed | https://stenciljs.com\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n *\r\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\r\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\r\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\r\n */\r\nconst safeSelector = (selector) => {\r\n    const placeholders = [];\r\n    let index = 0;\r\n    let content;\r\n    // Replaces attribute selectors with placeholders.\r\n    // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\r\n    selector = selector.replace(/(\\[[^\\]]*\\])/g, (_, keep) => {\r\n        const replaceBy = `__ph-${index}__`;\r\n        placeholders.push(keep);\r\n        index++;\r\n        return replaceBy;\r\n    });\r\n    // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\r\n    // WS and \"+\" would otherwise be interpreted as selector separators.\r\n    content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, (_, pseudo, exp) => {\r\n        const replaceBy = `__ph-${index}__`;\r\n        placeholders.push(exp);\r\n        index++;\r\n        return pseudo + replaceBy;\r\n    });\r\n    const ss = {\r\n        content,\r\n        placeholders,\r\n    };\r\n    return ss;\r\n};\r\nconst restoreSafeSelector = (placeholders, content) => {\r\n    return content.replace(/__ph-(\\d+)__/g, (_, index) => placeholders[+index]);\r\n};\r\nconst _polyfillHost = '-shadowcsshost';\r\nconst _polyfillSlotted = '-shadowcssslotted';\r\n// note: :host-context pre-processed to -shadowcsshostcontext.\r\nconst _polyfillHostContext = '-shadowcsscontext';\r\nconst _parenSuffix = ')(?:\\\\((' + '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' + ')\\\\))?([^,{]*)';\r\nconst _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\r\nconst _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\r\nconst _cssColonSlottedRe = new RegExp('(' + _polyfillSlotted + _parenSuffix, 'gim');\r\nconst _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\r\nconst _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\r\nconst _shadowDOMSelectorsRe = [/::shadow/g, /::content/g];\r\nconst _selectorReSuffix = '([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$';\r\nconst _polyfillHostRe = /-shadowcsshost/gim;\r\nconst _colonHostRe = /:host/gim;\r\nconst _colonSlottedRe = /::slotted/gim;\r\nconst _colonHostContextRe = /:host-context/gim;\r\nconst _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\r\nconst stripComments = (input) => {\r\n    return input.replace(_commentRe, '');\r\n};\r\nconst _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\r\nconst extractCommentsWithHash = (input) => {\r\n    return input.match(_commentWithHashRe) || [];\r\n};\r\nconst _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\r\nconst _curlyRe = /([{}])/g;\r\nconst OPEN_CURLY = '{';\r\nconst CLOSE_CURLY = '}';\r\nconst BLOCK_PLACEHOLDER = '%BLOCK%';\r\nconst processRules = (input, ruleCallback) => {\r\n    const inputWithEscapedBlocks = escapeBlocks(input);\r\n    let nextBlockIndex = 0;\r\n    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m) => {\r\n        const selector = m[2];\r\n        let content = '';\r\n        let suffix = m[4];\r\n        let contentPrefix = '';\r\n        if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\r\n            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\r\n            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\r\n            contentPrefix = '{';\r\n        }\r\n        const cssRule = {\r\n            selector,\r\n            content,\r\n        };\r\n        const rule = ruleCallback(cssRule);\r\n        return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;\r\n    });\r\n};\r\nconst escapeBlocks = (input) => {\r\n    const inputParts = input.split(_curlyRe);\r\n    const resultParts = [];\r\n    const escapedBlocks = [];\r\n    let bracketCount = 0;\r\n    let currentBlockParts = [];\r\n    for (let partIndex = 0; partIndex < inputParts.length; partIndex++) {\r\n        const part = inputParts[partIndex];\r\n        if (part === CLOSE_CURLY) {\r\n            bracketCount--;\r\n        }\r\n        if (bracketCount > 0) {\r\n            currentBlockParts.push(part);\r\n        }\r\n        else {\r\n            if (currentBlockParts.length > 0) {\r\n                escapedBlocks.push(currentBlockParts.join(''));\r\n                resultParts.push(BLOCK_PLACEHOLDER);\r\n                currentBlockParts = [];\r\n            }\r\n            resultParts.push(part);\r\n        }\r\n        if (part === OPEN_CURLY) {\r\n            bracketCount++;\r\n        }\r\n    }\r\n    if (currentBlockParts.length > 0) {\r\n        escapedBlocks.push(currentBlockParts.join(''));\r\n        resultParts.push(BLOCK_PLACEHOLDER);\r\n    }\r\n    const strEscapedBlocks = {\r\n        escapedString: resultParts.join(''),\r\n        blocks: escapedBlocks,\r\n    };\r\n    return strEscapedBlocks;\r\n};\r\nconst insertPolyfillHostInCssText = (selector) => {\r\n    selector = selector\r\n        .replace(_colonHostContextRe, _polyfillHostContext)\r\n        .replace(_colonHostRe, _polyfillHost)\r\n        .replace(_colonSlottedRe, _polyfillSlotted);\r\n    return selector;\r\n};\r\nconst convertColonRule = (cssText, regExp, partReplacer) => {\r\n    // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\r\n    return cssText.replace(regExp, (...m) => {\r\n        if (m[2]) {\r\n            const parts = m[2].split(',');\r\n            const r = [];\r\n            for (let i = 0; i < parts.length; i++) {\r\n                const p = parts[i].trim();\r\n                if (!p)\r\n                    break;\r\n                r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\r\n            }\r\n            return r.join(',');\r\n        }\r\n        else {\r\n            return _polyfillHostNoCombinator + m[3];\r\n        }\r\n    });\r\n};\r\nconst colonHostPartReplacer = (host, part, suffix) => {\r\n    return host + part.replace(_polyfillHost, '') + suffix;\r\n};\r\nconst convertColonHost = (cssText) => {\r\n    return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\r\n};\r\nconst colonHostContextPartReplacer = (host, part, suffix) => {\r\n    if (part.indexOf(_polyfillHost) > -1) {\r\n        return colonHostPartReplacer(host, part, suffix);\r\n    }\r\n    else {\r\n        return host + part + suffix + ', ' + part + ' ' + host + suffix;\r\n    }\r\n};\r\nconst convertColonSlotted = (cssText, slotScopeId) => {\r\n    const slotClass = '.' + slotScopeId + ' > ';\r\n    const selectors = [];\r\n    cssText = cssText.replace(_cssColonSlottedRe, (...m) => {\r\n        if (m[2]) {\r\n            const compound = m[2].trim();\r\n            const suffix = m[3];\r\n            const slottedSelector = slotClass + compound + suffix;\r\n            let prefixSelector = '';\r\n            for (let i = m[4] - 1; i >= 0; i--) {\r\n                const char = m[5][i];\r\n                if (char === '}' || char === ',') {\r\n                    break;\r\n                }\r\n                prefixSelector = char + prefixSelector;\r\n            }\r\n            const orgSelector = prefixSelector + slottedSelector;\r\n            const addedSelector = `${prefixSelector.trimRight()}${slottedSelector.trim()}`;\r\n            if (orgSelector.trim() !== addedSelector.trim()) {\r\n                const updatedSelector = `${addedSelector}, ${orgSelector}`;\r\n                selectors.push({\r\n                    orgSelector,\r\n                    updatedSelector,\r\n                });\r\n            }\r\n            return slottedSelector;\r\n        }\r\n        else {\r\n            return _polyfillHostNoCombinator + m[3];\r\n        }\r\n    });\r\n    return {\r\n        selectors,\r\n        cssText,\r\n    };\r\n};\r\nconst convertColonHostContext = (cssText) => {\r\n    return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\r\n};\r\nconst convertShadowDOMSelectors = (cssText) => {\r\n    return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, ' '), cssText);\r\n};\r\nconst makeScopeMatcher = (scopeSelector) => {\r\n    const lre = /\\[/g;\r\n    const rre = /\\]/g;\r\n    scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\r\n    return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\r\n};\r\nconst selectorNeedsScoping = (selector, scopeSelector) => {\r\n    const re = makeScopeMatcher(scopeSelector);\r\n    return !re.test(selector);\r\n};\r\nconst applySimpleSelectorScope = (selector, scopeSelector, hostSelector) => {\r\n    // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\r\n    _polyfillHostRe.lastIndex = 0;\r\n    if (_polyfillHostRe.test(selector)) {\r\n        const replaceBy = `.${hostSelector}`;\r\n        return selector\r\n            .replace(_polyfillHostNoCombinatorRe, (_, selector) => {\r\n            return selector.replace(/([^:]*)(:*)(.*)/, (_, before, colon, after) => {\r\n                return before + replaceBy + colon + after;\r\n            });\r\n        })\r\n            .replace(_polyfillHostRe, replaceBy + ' ');\r\n    }\r\n    return scopeSelector + ' ' + selector;\r\n};\r\nconst applyStrictSelectorScope = (selector, scopeSelector, hostSelector) => {\r\n    const isRe = /\\[is=([^\\]]*)\\]/g;\r\n    scopeSelector = scopeSelector.replace(isRe, (_, ...parts) => parts[0]);\r\n    const className = '.' + scopeSelector;\r\n    const _scopeSelectorPart = (p) => {\r\n        let scopedP = p.trim();\r\n        if (!scopedP) {\r\n            return '';\r\n        }\r\n        if (p.indexOf(_polyfillHostNoCombinator) > -1) {\r\n            scopedP = applySimpleSelectorScope(p, scopeSelector, hostSelector);\r\n        }\r\n        else {\r\n            // remove :host since it should be unnecessary\r\n            const t = p.replace(_polyfillHostRe, '');\r\n            if (t.length > 0) {\r\n                const matches = t.match(/([^:]*)(:*)(.*)/);\r\n                if (matches) {\r\n                    scopedP = matches[1] + className + matches[2] + matches[3];\r\n                }\r\n            }\r\n        }\r\n        return scopedP;\r\n    };\r\n    const safeContent = safeSelector(selector);\r\n    selector = safeContent.content;\r\n    let scopedSelector = '';\r\n    let startIndex = 0;\r\n    let res;\r\n    const sep = /( |>|\\+|~(?!=))\\s*/g;\r\n    // If a selector appears before :host it should not be shimmed as it\r\n    // matches on ancestor elements and not on elements in the host's shadow\r\n    // `:host-context(div)` is transformed to\r\n    // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\r\n    // the `div` is not part of the component in the 2nd selectors and should not be scoped.\r\n    // Historically `component-tag:host` was matching the component so we also want to preserve\r\n    // this behavior to avoid breaking legacy apps (it should not match).\r\n    // The behavior should be:\r\n    // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\r\n    // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\r\n    //   `:host-context(tag)`)\r\n    const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\r\n    // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\r\n    let shouldScope = !hasHost;\r\n    while ((res = sep.exec(selector)) !== null) {\r\n        const separator = res[1];\r\n        const part = selector.slice(startIndex, res.index).trim();\r\n        shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\r\n        const scopedPart = shouldScope ? _scopeSelectorPart(part) : part;\r\n        scopedSelector += `${scopedPart} ${separator} `;\r\n        startIndex = sep.lastIndex;\r\n    }\r\n    const part = selector.substring(startIndex);\r\n    shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\r\n    scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\r\n    // replace the placeholders with their original values\r\n    return restoreSafeSelector(safeContent.placeholders, scopedSelector);\r\n};\r\nconst scopeSelector = (selector, scopeSelectorText, hostSelector, slotSelector) => {\r\n    return selector\r\n        .split(',')\r\n        .map((shallowPart) => {\r\n        if (slotSelector && shallowPart.indexOf('.' + slotSelector) > -1) {\r\n            return shallowPart.trim();\r\n        }\r\n        if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\r\n            return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\r\n        }\r\n        else {\r\n            return shallowPart.trim();\r\n        }\r\n    })\r\n        .join(', ');\r\n};\r\nconst scopeSelectors = (cssText, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector) => {\r\n    return processRules(cssText, (rule) => {\r\n        let selector = rule.selector;\r\n        let content = rule.content;\r\n        if (rule.selector[0] !== '@') {\r\n            selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\r\n        }\r\n        else if (rule.selector.startsWith('@media') ||\r\n            rule.selector.startsWith('@supports') ||\r\n            rule.selector.startsWith('@page') ||\r\n            rule.selector.startsWith('@document')) {\r\n            content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector);\r\n        }\r\n        const cssRule = {\r\n            selector: selector.replace(/\\s{2,}/g, ' ').trim(),\r\n            content,\r\n        };\r\n        return cssRule;\r\n    });\r\n};\r\nconst scopeCssText = (cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) => {\r\n    cssText = insertPolyfillHostInCssText(cssText);\r\n    cssText = convertColonHost(cssText);\r\n    cssText = convertColonHostContext(cssText);\r\n    const slotted = convertColonSlotted(cssText, slotScopeId);\r\n    cssText = slotted.cssText;\r\n    cssText = convertShadowDOMSelectors(cssText);\r\n    if (scopeId) {\r\n        cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId);\r\n    }\r\n    cssText = cssText.replace(/-shadowcsshost-no-combinator/g, `.${hostScopeId}`);\r\n    cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, ' $1 ');\r\n    return {\r\n        cssText: cssText.trim(),\r\n        slottedSelectors: slotted.selectors,\r\n    };\r\n};\r\nconst scopeCss = (cssText, scopeId, commentOriginalSelector) => {\r\n    const hostScopeId = scopeId + '-h';\r\n    const slotScopeId = scopeId + '-s';\r\n    const commentsWithHash = extractCommentsWithHash(cssText);\r\n    cssText = stripComments(cssText);\r\n    const orgSelectors = [];\r\n    if (commentOriginalSelector) {\r\n        const processCommentedSelector = (rule) => {\r\n            const placeholder = `/*!@___${orgSelectors.length}___*/`;\r\n            const comment = `/*!@${rule.selector}*/`;\r\n            orgSelectors.push({ placeholder, comment });\r\n            rule.selector = placeholder + rule.selector;\r\n            return rule;\r\n        };\r\n        cssText = processRules(cssText, (rule) => {\r\n            if (rule.selector[0] !== '@') {\r\n                return processCommentedSelector(rule);\r\n            }\r\n            else if (rule.selector.startsWith('@media') ||\r\n                rule.selector.startsWith('@supports') ||\r\n                rule.selector.startsWith('@page') ||\r\n                rule.selector.startsWith('@document')) {\r\n                rule.content = processRules(rule.content, processCommentedSelector);\r\n                return rule;\r\n            }\r\n            return rule;\r\n        });\r\n    }\r\n    const scoped = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId);\r\n    cssText = [scoped.cssText, ...commentsWithHash].join('\\n');\r\n    if (commentOriginalSelector) {\r\n        orgSelectors.forEach(({ placeholder, comment }) => {\r\n            cssText = cssText.replace(placeholder, comment);\r\n        });\r\n    }\r\n    scoped.slottedSelectors.forEach((slottedSelector) => {\r\n        cssText = cssText.replace(slottedSelector.orgSelector, slottedSelector.updatedSelector);\r\n    });\r\n    return cssText;\r\n};\r\n\r\nexport { scopeCss };\r\n"],"sourceRoot":""}